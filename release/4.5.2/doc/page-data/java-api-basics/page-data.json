{"componentChunkName":"component---node-modules-carrotsearch-gatsby-theme-apidocs-templates-documentation-page-js","path":"/java-api-basics/","result":{"data":{"site":{"siteMetadata":{"title":"Carrot2 docs","description":"User and developer manual for the Carrot2 text clustering engine.","lang":"en","indexAlias":"/hello-carrot2/"}},"html":{"frontmatter":{"id":"java-api-basics","title":"Java API Basics"},"html":"<article>\n  <h1>Java API Basics</h1>\n\n  <p id=\"0553e041\">\n    This article will walk you through the basics of the Carrot<sup>2</sup> Java API.\n  </p>\n\n\n  <section id=\"dependencies\">\n    <h2>\n        <a class=\"anchor\" href=\"#dependencies\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dependencies\n      </h2>\n\n    <p id=\"dependencies:3757dd69\">\n      Carrot<sup>2</sup> is a Java library (JAR) with artifacts published via\n      Maven Central repositories. The following JAR contains the core APIs,\n      language resources for English and the clustering algorithms:\n    </p>\n\n    <pre><code data-language=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupid</span>&gt;</span>org.carrot2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupid</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactid</span>&gt;</span>carrot2-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactid</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.5.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n\n    <p id=\"dependencies:ad74a5a8\">\n      A corresponding Gradle dependency would look like this:\n    </p>\n\n    <pre><code data-language=\"groovy\">implementation <span class=\"hljs-string\">\"org.carrot2:carrot2-core:4.5.2\"</span></code></pre>\n\n    <div class=\"warning\" id=\"dependencies:099560b9\">\n      <strong>Clustering non-English languages</strong>\n\n      <p id=\"dependencies:dfd10916\">\n        Additional JARs may be required to cluster documents in languages other than English.\n        Please refer to the <a href=\"/java-language-components/#other-languages\">Language components</a> to\n        see what's needed.\n      </p>\n    </div>\n\n    <p id=\"dependencies:eea70ea3\">\n      A binary Carrot<sup>2</sup> distribution, including all examples, is always available at\n      the project's <a href=\"https://github.com/carrot2/carrot2/releases\">GitHub releases page</a>.\n    </p>\n  </section>\n\n\n  <section id=\"api-workflow\">\n    <h2>\n        <a class=\"anchor\" href=\"#api-workflow\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API workflow\n      </h2>\n\n    <p id=\"api-workflow:c15130ca\">\n      Using Carrot<sup>2</sup> Java API consists of the following steps:\n    </p>\n\n    <ol>\n      <li>\n        <p id=\"api-workflow:58423405\">\n          setting up heavy, thread-safe, reusable components (language dictionaries and auxiliary\n          resources combined in an instance of the <code>LanguageComponents</code> class),\n        </p>\n      </li>\n      <li>\n        <p id=\"api-workflow:f150a42a\">\n          setting up lightweight, per-thread components (clustering algorithms),\n        </p>\n      </li>\n      <li>\n        <p id=\"api-workflow:81818897\">\n          preparing input documents and performing the actual clustering.\n        </p>\n      </li>\n    </ol>\n\n    <section id=\"api-workflow:component-types\">\n      <h3>\n        <a class=\"anchor\" href=\"#api-workflow:component-types\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Heavy and lightweight components\n      </h3>\n\n      <p id=\"api-workflow:component-types:937ab28f\">\n        Initialization of heavy components (<code>LanguageComponents</code>) may take significant time.\n        <strong>Load them once and then reuse for all subsequent clustering calls</strong>.\n        Heavy components are thread-safe and can be reused or shared between threads.\n      </p>\n\n      <p id=\"api-workflow:component-types:e051a5b6\">\n        Lightweight components, such as clustering algorithm instances, are cheap\n        to instantiate so you can create a throw-away instance on-demand for\n        each clustering call.\n      </p>\n    </section>\n\n    <section id=\"api-workflow:clustering\">\n      <h3>\n        <a class=\"anchor\" href=\"#api-workflow:clustering\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Clustering\n      </h3>\n\n      <p id=\"api-workflow:clustering:24489a77\">\n        This section discusses code from the <code>E01_ClusteringBasics.java</code>\n        example. It shows just the key elements required to process a stream of documents\n        in English, without any parameter or language resource tuning.\n      </p>\n\n      <p id=\"api-workflow:clustering:b2dc0a6f\">\n        First, let's load the heavy components: the default resources for the English language. The\n        loaded <code>LanguageComponents</code> instance is thread-safe and should be reused for\n        any subsequent calls to clustering algorithms.\n      </p>\n\n      <pre><code data-language=\"java\"><span class=\"hljs-comment\">// Our documents are in English so we load appropriate language resources.</span>\n<span class=\"hljs-comment\">// This call can be heavy and an instance of LanguageComponents should be</span>\n<span class=\"hljs-comment\">// created once and reused across different clustering calls.</span>\n<span class=\"hljs-type\">LanguageComponents</span> <span class=\"hljs-variable\">languageComponents</span> <span class=\"hljs-operator\">=</span> LanguageComponents.loader().load().language(<span class=\"hljs-string\">\"English\"</span>);</code></pre>\n\n      <p id=\"api-workflow:clustering:7e01e521\">\n        Now it's time to create the lightweight component: an instance of a clustering algorithm.\n        Let's pick the Lingo algorithm explicitly:\n      </p>\n\n      <pre><code data-language=\"java\"><span class=\"hljs-type\">LingoClusteringAlgorithm</span> <span class=\"hljs-variable\">algorithm</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LingoClusteringAlgorithm</span>();</code></pre>\n\n      <p id=\"api-workflow:clustering:7767cd0e\">\n        Once we have the heavy and lightweight components initialized, we can assemble the input\n        for clustering: a stream of <code>Document</code> instances. Each document must implement a\n        single method that presents its clusterable text fields to the algorithm:\n      </p>\n\n      <pre><code data-language=\"java\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">visitFields</span><span class=\"hljs-params\">(BiConsumer&lt;String, String&gt; fieldConsumer)</span>;</code></pre>\n\n      <p id=\"api-workflow:clustering:b7198149\">\n        In this example we will use hardcoded values from an array available in the\n        <code>ExamplesData</code> class:\n      </p>\n\n      <pre><code data-language=\"java\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String[][] DOCUMENTS_DATA_MINING = {\n  {\n    <span class=\"hljs-string\">\"http://en.wikipedia.org/wiki/Data_mining\"</span>,\n    <span class=\"hljs-string\">\"Data mining -\"</span> + <span class=\"hljs-string\">\" Wikipedia, the free \"</span> + <span class=\"hljs-string\">\"encyclopedia\"</span>,\n    <span class=\"hljs-string\">\"Article about knowledge-discovery in databases (KDD), the practice \"</span>\n        + <span class=\"hljs-string\">\"of automatically \"</span>\n        + <span class=\"hljs-string\">\"searching large stores of data for patterns.\"</span>\n  },</code></pre>\n\n      <p id=\"api-workflow:clustering:310fb81d\">\n        Because the field visitor interface is a single method, it can be implemented using a closure.\n        We convert the above data array into document instances dynamically using Java streams.\n        Note how we only expose the title and the snippet fields, the URL is omitted because\n        it is not really clusterable text content.\n      </p>\n\n      <pre><code data-language=\"java\"><span class=\"hljs-comment\">// Create a stream of \"documents\" for clustering.</span>\n<span class=\"hljs-comment\">// Each such document provides text content fields to a visitor.</span>\nStream&lt;Document&gt; documentStream =\n    Arrays.stream(ExamplesData.DOCUMENTS_DATA_MINING)\n        .map(\n            fields -&gt;\n                (fieldVisitor) -&gt; {\n                  fieldVisitor.accept(<span class=\"hljs-string\">\"title\"</span>, fields[<span class=\"hljs-number\">1</span>]);\n                  fieldVisitor.accept(<span class=\"hljs-string\">\"content\"</span>, fields[<span class=\"hljs-number\">2</span>]);\n                });</code></pre>\n\n      <p id=\"api-workflow:clustering:1faf8c33\">\n        Everything is now ready to call the clustering algorithm and consume the result.\n        Here we just print the top-level cluster labels and document counts to the console:\n      </p>\n\n      <pre><code data-language=\"java\"><span class=\"hljs-comment\">// Perform clustering.</span>\nList&lt;Cluster&lt;Document&gt;&gt; clusters;\nclusters = algorithm.cluster(documentStream, languageComponents);\n\n<span class=\"hljs-comment\">// Print cluster labels and a document count in each top-level cluster.</span>\n<span class=\"hljs-keyword\">for</span> (Cluster&lt;Document&gt; c : clusters) {\n  <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">label</span> <span class=\"hljs-operator\">=</span> String.join(<span class=\"hljs-string\">\"; \"</span>, c.getLabels());\n  System.out.println(label + <span class=\"hljs-string\">\", documents: \"</span> + c.getDocuments().size());\n}</code></pre>\n\n      <p id=\"api-workflow:clustering:d5523dba\">\n        When executed, this example should result in this output:\n      </p>\n\n      <pre><code data-language=\"plaintext\">Data Mining Software, documents: 13\nKnowledge Discovery, documents: 13\nData Mining Process, documents: 12\nData Mining Applications, documents: 11\nData Mining Techniques, documents: 11</code></pre>\n    </section>\n  </section>\n\n  <section id=\"tweaking-parameters\">\n    <h2>\n        <a class=\"anchor\" href=\"#tweaking-parameters\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tweaking parameters\n      </h2>\n\n    <p id=\"tweaking-parameters:99c067aa\">\n      Each clustering algorithm will have a different set of knobs to adjust its behavior.\n      All algorithms in Carrot<sup>2</sup> have public fields, documented in the generated JavaDoc\n      documentation, that allow direct changes of an algorithm's settings. For example:\n    </p>\n\n    <pre><code data-language=\"java\"><span class=\"hljs-type\">LingoClusteringAlgorithm</span> <span class=\"hljs-variable\">algorithm</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LingoClusteringAlgorithm</span>();\nalgorithm.desiredClusterCount.set(<span class=\"hljs-number\">10</span>);\nalgorithm.preprocessing.wordDfThreshold.set(<span class=\"hljs-number\">5</span>);\nalgorithm.preprocessing.phraseDfThreshold.set(<span class=\"hljs-number\">5</span>);\nalgorithm.preprocessing.documentAssigner.minClusterSize.set(<span class=\"hljs-number\">4</span>);</code></pre>\n\n    <p id=\"tweaking-parameters:6b4b946e\">\n      Note that even primitive-type parameters like <code>wordDfThreshold</code> above have to use\n      setter methods to modify their value. This is because arguments are validated early and\n      out-of-range or otherwise incorrect values will trigger exceptions at the exact moment they\n      are set in the code.\n    </p>\n\n    <p id=\"tweaking-parameters:6711fab9\">\n      When a parameter's type is an interface, the concrete type variable can\n      be declared and configured prior to setting the final parameter. Local-variable\n      type inference (<code>var</code>) available from Java 10 on is useful to keep these\n      declaration compact and still have the compiler (and IDE) provide field suggestions upon\n      typing:\n    </p>\n\n    <pre><code data-language=\"java\"><span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">factorizationFactory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalNonnegativeMatrixFactorizationFactory</span>();\nfactorizationFactory.factorizationQuality.set(FactorizationQuality.HIGH);\n\nalgorithm.matrixReducer.factorizationFactory = factorizationFactory;</code></pre>\n\n    <p id=\"tweaking-parameters:56feca0a\">\n      Once an algorithm is configured, it can be reused across many subsequent (sequential)\n      clustering calls. The <a href=\"/java-concurrency/\">concurrency section</a> discusses\n      approaches to running algorithms in concurrent threads.\n    </p>\n  </section>\n\n  <section id=\"customizing-dictionaries\">\n    <h2>\n        <a class=\"anchor\" href=\"#customizing-dictionaries\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Customizing dictionaries\n      </h2>\n\n    <p id=\"customizing-dictionaries:9d778fc6\">\n      The simplest way to customize word and label\n      <a href=\"/dictionaries/\">filter dictionaries</a> is to copy the\n      <a href=\"/dictionaries/#location-of-dictionary-files:java-api\">default\n      dictionaries</a> to your application-specific location and provide\n      a custom <code>ResourceLookup</code> implementation when loading language\n      resources. The following example loads English resources from a class-relative\n      classpath location.\n    </p>\n\n    <figure>\n      <pre><code data-language=\"java\"><span class=\"hljs-type\">LanguageComponents</span> <span class=\"hljs-variable\">custom</span> <span class=\"hljs-operator\">=</span>\n    LanguageComponents.loader()\n        <span class=\"hljs-comment\">// Note we restrict languages to just English because resources for</span>\n        <span class=\"hljs-comment\">// other languages are missing from the location of resource lookup</span>\n        <span class=\"hljs-comment\">// and would have caused an exception.</span>\n        .limitToLanguages(<span class=\"hljs-string\">\"English\"</span>)\n        <span class=\"hljs-comment\">// and we substitute resource lookup locations with our custom location.</span>\n        .withResourceLookup(provider -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassRelativeResourceLookup</span>(E03_Languages.class))\n        .load()\n        .language(<span class=\"hljs-string\">\"English\"</span>);</code></pre>\n      <figcaption>\n        Loading English language resources from a class-relative classpath location.\n      </figcaption>\n    </figure>\n\n    <p id=\"customizing-dictionaries:8b356dfc\">\n      The <a href=\"/java-language-components/\">Language Components</a> section\n      describes Carrot<sup>2</sup> language resource management in detail, including\n      <a href=\"/java-language-components/#ephemeral-dictionaries\">ephemeral\n      dictionaries</a> for temporary per-clustering word and label filtering,\n      <a href=\"/java-language-components/#tweaking-components-directly\">LanguageComponents\n      customization</a> for replacing a stemmer or custom filtering,\n      <a href=\"/java-language-components/#other-languages\">support for other languages</a>.\n    </p>\n  </section>\n</article>","tableOfContents":[{"heading":"Dependencies","anchor":"dependencies"},{"heading":"API workflow","anchor":"api-workflow","sections":[{"heading":"Heavy and lightweight components","anchor":"api-workflow:component-types"},{"heading":"Clustering","anchor":"api-workflow:clustering"}]},{"heading":"Tweaking parameters","anchor":"tweaking-parameters"},{"heading":"Customizing dictionaries","anchor":"customizing-dictionaries"}]}},"pageContext":{"slug":"/java-api-basics/"}},"staticQueryHashes":["2081922839"]}