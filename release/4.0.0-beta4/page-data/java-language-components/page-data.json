{"componentChunkName":"component---node-modules-carrotsearch-gatsby-plugin-apidocs-dist-templates-documentation-page-js","path":"/java-language-components/","webpackCompilationHash":"d1ff5ce064b778ec80aa","result":{"data":{"html":{"frontmatter":{"id":"java-language-components","title":"Language Components"},"html":"<article>\n  <h1>Language Components</h1>\n\n  <p id=\"d2b51f474ac2f88ee335e488\">\n    In this section we describe the role and potential customisation options for language-specific\n    heavyweight components.\n  </p>\n\n  <p id=\"a8fd218908927f9faa95ff2b\">\n    <code>LanguageComponent</code> instances provide assistance and hints to improve the\n    quality of clustering for a specific language. The resources associated with this task\n    typically require costly processing to load and parse, so <code>LanguageComponent</code>\n    instances should be <strong>created early and reused for all subsequent clustering\n    calls</strong>.\n  </p>\n\n  <p id=\"c787529b0990b5412ab3ad9b\">\n    A single <code>LanguageComponent</code> instance can provide a number of resources to aid\n    the algorithm in improving clustering quality:\n  </p>\n\n  <ul>\n    <li id=\"eda45bda516df41c16591a06\">lemmatisation (stemming) routines,</li>\n    <li id=\"901ac072e7cf4855e43c1ff1\">tokenisation (word decomposition) and decompounding routines,</li>\n    <li id=\"4711ebc12ccd799f542c694b\">part of speech dictionaries,</li>\n    <li id=\"a6bb2b8cd7edcf53982cb3f6\">ignore lists (stop word lists).</li>\n  </ul>\n\n  <p id=\"ce6e587849ea68d44d4bf6b7\">\n    The above list is not restricted or complete: each algorithm may require\n    a different set of components to function properly and each language will have a specific set\n    of components that makes sense for that particular language. All available languages\n    and their provided components (interfaces) can be enumerated via service point extension,\n    as shown below.\n  </p>\n\n  <div class=\"gatsby-highlight\">\n    <pre class=\"language-java\"><code data-language=\"java\"><span class=\"token class-name\">ServiceLoader</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LanguageComponentsProvider</span><span class=\"token punctuation\">></span></span> providers <span class=\"token operator\">=</span>\n    <span class=\"token class-name\">ServiceLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LanguageComponentsProvider</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LanguageComponentsProvider</span> prov <span class=\"token operator\">:</span> providers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Provider class: \"</span> <span class=\"token operator\">+</span> prov<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> language <span class=\"token operator\">:</span> prov<span class=\"token punctuation\">.</span><span class=\"token function\">languages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  > \"</span> <span class=\"token operator\">+</span> language<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> componentClass <span class=\"token operator\">:</span> prov<span class=\"token punctuation\">.</span><span class=\"token function\">componentTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    Component: \"</span> <span class=\"token operator\">+</span> componentClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </div>\n\n  <p id=\"4d0d09d6581297c24379fb41\">\n    The code above prints the following when executed, revealing interfaces of components\n    provided by the default provider for English (other languages omitted):\n  </p>\n\n  <div class=\"gatsby-highlight\">\n    <pre class=\"language-none\"><code data-language=\"none\">Provider class: Carrot2 (English, Danish, Dutch, [...]\n  > English\n    Component: org.carrot2.language.Stemmer\n    Component: org.carrot2.language.Tokenizer\n    Component: org.carrot2.language.LexicalData\n    Component: org.carrot2.text.preprocessing.LabelFormatter\n  [...]</code></pre>\n  </div>\n\n  <p id=\"eb50ef4d8da069f89fba0246\">\n    Each of the interfaces of a language component can be\n    overridden. However, for the vast majority of applications\n    only minor tweaks to the defaults are really needed. For example, adding ignorable\n    terms and phrases specific to a given domain is a very helpful step\n    to increase clustering quality\n    (patent documents will have a different lexicon compared to an unrestricted e-mail corpus, for example).\n    Let's take a look at how this is done first.\n  </p>\n\n  <div class=\"warning\" id=\"74654a134134697ecbeec190\">\n    <strong>Some algorithms may not support all languages</strong>\n\n    <p id=\"5dcfd77008f9a6bbf12e277e\">\n      Clustering algorithms may support a subset of languages and language component instances\n      assembled\n      manually. Each clustering algorithm has a method called <code>supports(LanguageComponents\n      lc)</code>\n      which can be used to check whether the algorithm works with a given instance of language\n      components.\n    </p>\n  </div>\n\n  <section id=\"tweaking-lexical-data-resources\">\n    <h2>\n        <a class=\"anchor\" href=\"#tweaking-lexical-data-resources\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Tweaking lexical data resources\n      </h2>\n\n    <p id=\"ee35890b7d0ca973f770e84a\">\n      The <code>LexicalData</code> component is responsible\n      for telling the algorithm whether a term or a candidate cluster\n      label should be ignored. Such ignorable elements typically include function\n      words like prepositions, conjunctions or domain-specific boilerplate language that\n      is not a good candidate for a cluster.\n    </p>\n\n    <div class=\"gatsby-highlight\">\n    <pre class=\"language-java\"><code data-language=\"java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">LexicalData</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/** @return Return true if the provided term should be ignored in processing. */</span>\n  <span class=\"token keyword\">boolean</span> <span class=\"token function\">ignoreWord</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/** @return Return true if the label candidate should be ignored in processing. */</span>\n  <span class=\"token keyword\">boolean</span> <span class=\"token function\">ignoreLabel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> labelCandidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </div>\n\n    <p id=\"0a5e818ab9a3cc32f815da6e\">\n      The most common quality tuning step is modifying the\n      resources provided for the <code>LexicalData</code> component's\n      default implementation (<code>LexicalDataImpl</code>). This class\n      attempts to load two files (where the <i>lang</i> prefix is replaced with the\n      name of the language the component is instantiated for):\n    </p>\n\n    <dl>\n      <dt><i>lang</i>.stopwords.utf8</dt>\n      <dd>\n        A plain-text list of words to ignore. Each line contains exactly one full word (token).\n        Something like the following:\n        <pre>a\nabout\nabove\nacross\n...</pre>\n      </dd>\n\n      <dt><i>lang</i>.stoplabels.utf8</dt>\n      <dd>\n        A plain-text list of Java regular expression patterns to ignore. Each line contains exactly\n        one expression that, if it matches the input label, causes the label to be discarded and\n        ignored during clustering. An example stop labels file could look like this:\n        <pre>(?i)information (about|on).*\n(?i)(index|list) of.*\n...</pre>\n      </dd>\n    </dl>\n\n    <p id=\"38f05e539f601afe4b9c064c\">\n      The <code>LanguageComponentsLoader</code> class has methods to restrict\n      the number of loaded resources to only cover the needed languages (and/ or algorithms). There\n      is also a method for adding custom <code>ResourceLookup</code> implementation, responsible\n      for locating any external resources components may require.\n      We can load our custom, modified resources using this facility without\n      touching any of the default components. It's a good idea to start tweaking custom resources\n      by first copying the defaults from Carrot<sup>2</sup> JARs and then modifying them in\n      the new location.\n    </p>\n\n    <div class=\"gatsby-highlight\">\n    <pre class=\"language-java\"><code data-language=\"java\"><span class=\"token class-name\">ResourceLookup</span> resLookup <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassRelativeResourceLookup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E03_CustomLanguageComponents</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">LanguageComponents</span> custom <span class=\"token operator\">=</span>\n    <span class=\"token class-name\">LanguageComponents</span><span class=\"token punctuation\">.</span><span class=\"token function\">loader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Note we restrict languages to just English because resources for other languages</span>\n        <span class=\"token comment\">// are missing from the location of resource lookup and would have caused an exception.</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">limitToLanguages</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"English\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// and we substitute resource lookup locations with our custom location.</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">withResourceLookup</span><span class=\"token punctuation\">(</span>provider <span class=\"token operator\">-></span> resLookup<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">language</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"English\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n  </div>\n\n    <p id=\"7591560ece915bbff2db76d2\">\n      Once loaded, the <code>LanguageComponents</code> object is ready to be used for subsequent\n      clustering calls.\n    </p>\n  </section>\n\n  <section id=\"tweaking-components-directly\">\n    <h2>\n        <a class=\"anchor\" href=\"#tweaking-components-directly\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Tweaking components directly\n      </h2>\n\n    <p id=\"5f0bbcbaed9853936c30e634\">\n      It may be sometimes desirable to provide an entirely custom implementation of a given\n      preprocessing component. An instance of <code>LanguageComponents</code> class consists\n      of a set of components (interfaces) and suppliers providing implementations of these\n      interfaces. We can override any of these suppliers, creating a custom language preprocessing\n      pipeline.\n    </p>\n\n    <p id=\"d3580bc86b406f8133b674c5\">\n      As an example, let's modify the English pipeline to use a custom word stemming component.\n      The supplier for this component always returns the same closure, converting the input to lower\n      case:\n    </p>\n\n    <div class=\"gatsby-highlight\">\n    <pre class=\"language-java\"><code data-language=\"java\"><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Stemmer</span><span class=\"token punctuation\">></span></span> stemmerSupplier<span class=\"token punctuation\">;</span>\nstemmerSupplier <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> word<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span>ROOT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n  </div>\n\n    <p id=\"1a032fb7ff1706e8c90c9fdc\">\n      We will also replace the default <code>LexicalData</code> implementation with simple custom\n      filtering based on hardcoded rules:\n    </p>\n\n    <div class=\"gatsby-highlight\">\n    <pre class=\"language-java\"><code data-language=\"java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> ignored <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"what\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LexicalData</span><span class=\"token punctuation\">></span></span> lexicalDataSupplier <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">LexicalData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token annotation punctuation\">@Override</span>\n          <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">ignoreLabel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> candidate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Ignore any label that has a substring 'data' in it.</span>\n            <span class=\"token keyword\">return</span> candidate<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span>ROOT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n\n          <span class=\"token annotation punctuation\">@Override</span>\n          <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">ignoreWord</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\"><</span> <span class=\"token number\">4</span> <span class=\"token operator\">||</span> ignored<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n  </div>\n\n    <p id=\"0f4df0fc02ed21863788baa2\">\n      Note how the initialization of the <code>ignored</code> set is pulled out of the supplier.\n      The cost of setting up a heavy component (the supplier itself here) can be high but\n      once set up, suppliers should return instances of a given component quickly.\n    </p>\n\n    <p id=\"279a15b3b4b42344d301a6bb\">\n      Once we have custom suppliers, overriding their default implementations\n      for English is trivial:\n    </p>\n\n    <div class=\"gatsby-highlight\">\n    <pre class=\"language-java\"><code data-language=\"java\"><span class=\"token class-name\">LanguageComponents</span> customized <span class=\"token operator\">=</span>\n    <span class=\"token class-name\">LanguageComponents</span><span class=\"token punctuation\">.</span><span class=\"token function\">loader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">language</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"English\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">override</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stemmer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> stemmerSupplier<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">override</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LexicalData</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> lexicalDataSupplier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n  </div>\n\n  </section>\n\n  <section id=\"other-languages\">\n    <h2>\n        <a class=\"anchor\" href=\"#other-languages\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Support for other languages\n      </h2>\n\n    <p id=\"6928097f1ae1405c22aba844\">\n      The core Carrot<sup>2</sup> JAR supports only a limited set of popular languages.\n      Additional modules add support for other languages and bring in extra resources required\n      for these languages to work properly.\n    </p>\n\n    <p id=\"554ef35e170f81f3188448b3\">\n      All language extensions live under the <code>org.carrot2.lang</code> artifact\n      group namespace. Note that many of them come with sizeable\n      own dependencies like <a href=\"https://lucene.apache.org/\">Apache Lucene</a>\n      analyzers or dictionaries.\n    </p>\n\n    <ul>\n      <li id=\"125c9c0e8e67f38a2292ad2b\"><code>carrot2-lang-lucene-chinese</code>: Chinese (traditional\n        and simplified).\n      </li>\n      <li id=\"7eaef67c21e8086e7a11fbf2\"><code>carrot2-lang-lucene-japanese</code>: Japanese.</li>\n      <li id=\"84bfacffa246423eeb4258c9\"><code>carrot2-lang-lucene-korean</code>: Korean.</li>\n      <li id=\"92fe38f3120d8a695bbfe504\"><code>carrot2-lang-lucene</code>: adds support for many other languages\n        supported by the <a href=\"https://lucene.apache.org/\">Apache Lucene</a> project.\n      </li>\n      <li id=\"a38b32be5bc2feabe60b9e3e\"><code>carrot2-lang-polish</code>: Polish.</li>\n    </ul>\n\n    <p id=\"add61fd03436e3605c8e83da\">\n      A language extension is automatically added to the list of supported language components if\n      it can be located and loaded by Java's standard <code>ServiceLoader</code>.\n    </p>\n\n  </section>\n</article>","tableOfContents":[{"heading":"Tweaking lexical data resources","anchor":"tweaking-lexical-data-resources"},{"heading":"Tweaking components directly","anchor":"tweaking-components-directly"},{"heading":"Support for other languages","anchor":"other-languages"}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/java-language-components/"}}}