{"componentChunkName":"component---node-modules-carrotsearch-gatsby-theme-apidocs-templates-documentation-page-js","path":"/java-language-components/","result":{"data":{"html":{"frontmatter":{"id":"java-language-components","title":"Language Components"},"html":"<article>\n  <h1>Language Components</h1>\n\n  <p id=\"d2b51f474ac2f88ee335e488\">\n    In this section we describe the role and potential customisation options for language-specific\n    heavyweight components.\n  </p>\n\n  <p id=\"a8fd218908927f9faa95ff2b\">\n    <code>LanguageComponent</code> instances provide assistance and hints to improve the\n    quality of clustering for a specific language. The resources associated with this task\n    typically require costly processing to load and parse, so <code>LanguageComponent</code>\n    instances should be <strong>created early and reused for all subsequent clustering\n    calls</strong>.\n  </p>\n\n  <p id=\"c787529b0990b5412ab3ad9b\">\n    A single <code>LanguageComponent</code> instance can provide a number of resources to aid\n    the algorithm in improving clustering quality:\n  </p>\n\n  <ul>\n    <li id=\"eda45bda516df41c16591a06\">lemmatisation (stemming) routines,</li>\n    <li id=\"901ac072e7cf4855e43c1ff1\">tokenisation (word decomposition) and decompounding routines,</li>\n    <li id=\"4711ebc12ccd799f542c694b\">part of speech dictionaries,</li>\n    <li id=\"3c031aa17e1f8e40600516d9\">word or label filters (<a href=\"/dictionaries/\">dictionaries</a>).</li>\n  </ul>\n\n  <p id=\"ce6e587849ea68d44d4bf6b7\">\n    The above list is not restricted or complete: each algorithm may require\n    a different set of components to function properly and each language will have a specific set\n    of components that makes sense for that particular language. All available languages\n    and their provided components (interfaces) can be enumerated via service point extension,\n    as shown below.\n  </p>\n\n  <div class=\"gatsby-highlight\">\n    <pre class=\"language-java\"><code data-language=\"java\"><span class=\"token class-name\">ServiceLoader</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LanguageComponentsProvider</span><span class=\"token punctuation\">></span></span> providers <span class=\"token operator\">=</span>\n    <span class=\"token class-name\">ServiceLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LanguageComponentsProvider</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LanguageComponentsProvider</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> langToProviders <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LanguageComponentsProvider</span> prov <span class=\"token operator\">:</span> providers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> lang <span class=\"token operator\">:</span> prov<span class=\"token punctuation\">.</span><span class=\"token function\">languages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    langToProviders<span class=\"token punctuation\">.</span><span class=\"token function\">computeIfAbsent</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>prov<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nlangToProviders<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">,</span> provList<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  > \"</span> <span class=\"token operator\">+</span> language<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      provList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n          provider <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    [Provider: \"</span> <span class=\"token operator\">+</span> provider<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> componentClass <span class=\"token operator\">:</span> provider<span class=\"token punctuation\">.</span><span class=\"token function\">componentTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"      Component: \"</span> <span class=\"token operator\">+</span> componentClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n  </div>\n\n  <p id=\"a25df7f1bcbf9a974cfe8250\">\n    The code above prints the following when executed, revealing providers\n    and components supplied for the English language (other languages omitted):\n  </p>\n\n  <div class=\"gatsby-highlight\">\n    <pre class=\"language-none\"><code data-language=\"none\">> English\n  [Provider: Carrot2 Core (Stemmers)]\n    Component: org.carrot2.language.Stemmer\n  [Provider: Carrot2 Core (Tokenizers)]\n    Component: org.carrot2.language.Tokenizer\n  [Provider: Carrot2 Core (Lexical Data)]\n    Component: org.carrot2.language.LabelFilter\n    Component: org.carrot2.language.StopwordFilter\n  [Provider: Carrot2 Core (Label Formatter)]\n    Component: org.carrot2.text.preprocessing.LabelFormatter\n[...]</code></pre>\n  </div>\n\n  <p id=\"eb50ef4d8da069f89fba0246\">\n    Each of the interfaces of a language component can be\n    overridden. However, for the vast majority of applications\n    only minor tweaks to the defaults are really needed. For example, adding ignorable\n    terms and phrases specific to a given domain is a very helpful step\n    to increase clustering quality\n    (patent documents will have a different lexicon compared to an unrestricted e-mail corpus, for example).\n    Let's take a look at how this is done first.\n  </p>\n\n  <div class=\"warning\" id=\"2a94737710c9f57b13b0ec1e\">\n    <strong>Some algorithms may not support all languages</strong>\n\n    <p id=\"47a44249ef4740416cef8fdb\">\n      A clustering algorithm in Carrot<sup>2</sup> may support only a subset of the languages\n      available from the <code>LanguageComponentsProvider</code> extension point.\n      Each clustering algorithm has a method called <code>supports(LanguageComponents lc)</code>\n      which can be used to test whether the algorithm works with a given language.\n    </p>\n  </div>\n\n\n\n  <section id=\"tweaking-lexical-filters\">\n    <h2>\n        <a class=\"anchor\" href=\"#tweaking-lexical-filters\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Tweaking lexical filters\n      </h2>\n\n    <p id=\"122b911b5dbe8db3bf2b10a3\">\n      Lexical filters are responsible for telling the algorithm whether a term or a candidate cluster\n      label should be ignored. Such ignorable elements typically include function\n      words like prepositions, conjunctions or domain-specific boilerplate language that\n      is not a good candidate for a cluster.\n    </p>\n\n    <p id=\"b0cb25a9886d33e2c589f537\">\n      The Java API defines two components (interfaces) that are part of each loaded\n      <code>LanguageComponents</code> instance:\n    </p>\n\n    <ul>\n      <li>\n        <p id=\"a78c48c0ffe76385b32f3792\">\n          The <code>StopwordFilter</code> interface controls low-level filtering\n          of individual terms:\n        </p>\n\n        <div class=\"gatsby-highlight\">\n    <pre class=\"language-java\"><code data-language=\"java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StopwordFilter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharSequence</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * @param word The word to test. Input words are guaranteed to be in lower case (consistent with\n   *     {@link Character#toLowerCase(int)}.\n   * @return Return {@code false} if the provided term should be ignored in processing.\n   */</span>\n  <span class=\"token keyword\">boolean</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n  </div>\n      </li>\n\n      <li>\n        <p id=\"aca92dec2aa2c897bf0c14dc\">\n          The <code>LabelFilter</code> interface controls low-level filtering\n          of undesired cluster labels.\n        </p>\n\n        <div class=\"gatsby-highlight\">\n    <pre class=\"language-java\"><code data-language=\"java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">LabelFilter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharSequence</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * @param label The label to test. Input labels may have mixed case, depending on the algorithm\n   *     and their surface forms collected from input documents.\n   * @return Return {@code false} if the label candidate should be ignored in processing.\n   */</span>\n  <span class=\"token keyword\">boolean</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n  </div>\n      </li>\n    </ul>\n\n\n    <p id=\"e6ac5517064153f5496a1d8a\">\n      Both these components can be explicitly provided (or overridden at runtime) in a\n      <code>LanguageComponents</code>\n      instance but implementing a custom filter is often impractical.\n      It is much easier to reuse the default implementation that builds\n      filters using <a href=\"/dictionaries/\">filter dictionaries</a> encoded in JSON.\n    </p>\n\n    <p id=\"aed4afe17e722c4321d9045a\">\n      To instantiate <code>LanguageComponents</code> for a particular language with a custom\n      set of dictionary resources, copy the\n      <a href=\"/dictionaries/#location-of-dictionary-files\">default resources</a>\n      shipped with the distribution somewhere where your application\n      can load them.\n    </p>\n\n    <p id=\"74bfedb51c6399eb449d35d1\">\n      The <code>LanguageComponentsLoader</code> class has a method to provide\n      a custom resource loader (<code>ResourceLookup</code> implementation)\n      responsible for locating any external resources language data may ask for.\n    </p>\n\n    <p id=\"54c37390b21a5f9f669bf91a\">\n      To restrict the number of loaded resources to only a subset of all available languages\n      (and/ or algorithms), use the loader's <code>limitToLanguages</code> and\n      <code>limitToAlgorithms</code> methods. Here is a full example that\n      loads English resources from a class-relative classpath location:\n    </p>\n\n    <div class=\"gatsby-highlight\">\n    <pre class=\"language-java\"><code data-language=\"java\"><span class=\"token class-name\">LanguageComponents</span> custom <span class=\"token operator\">=</span>\n    <span class=\"token class-name\">LanguageComponents</span><span class=\"token punctuation\">.</span><span class=\"token function\">loader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Note we restrict languages to just English because resources for</span>\n        <span class=\"token comment\">// other languages are missing from the location of resource lookup</span>\n        <span class=\"token comment\">// and would have caused an exception.</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">limitToLanguages</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"English\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// and we substitute resource lookup locations with our custom location.</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">withResourceLookup</span><span class=\"token punctuation\">(</span>provider <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassRelativeResourceLookup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E03_Languages</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">language</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"English\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n  </div>\n\n    <p id=\"7591560ece915bbff2db76d2\">\n      Once loaded, the <code>LanguageComponents</code> object is ready to be used for subsequent\n      clustering calls.\n    </p>\n\n    <p id=\"12d7b9a429d296ddf5a983a9\">\n      Note that language components loader does not track changes or reload anything\n      automatically (this would be a costly operation). If your lexical resources\n      change often, you'll have to resort to ephemeral dictionaries or\n      a custom implementation of filtering interfaces above.\n    </p>\n  </section>\n\n  <section id=\"ephemeral-dictionaries\">\n    <h2>\n        <a class=\"anchor\" href=\"#ephemeral-dictionaries\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Ephemeral dictionaries (lexical filters)\n      </h2>\n\n    <p id=\"bbbbcc92fd99cddd6d55de91\">\n      When filters for labels or stop words change frequently, reloading\n      a full set of dictionaries would be slow and impractical. Ephemeral dictionaries\n      are compiled for each clustering call and layered on top\n      of the default <code>LanguageComponents</code> implementations.\n      Please note that this adds some additional cost to each clustering call.\n    </p>\n\n    <p id=\"2bfbfc34964e214e863850d1\">\n      In the following example, the clustering algorithm uses the default language data for\n      English but adds request-specific regular patterns to exclude undesirable labels:\n    </p>\n\n    <div class=\"gatsby-highlight\">\n    <pre class=\"language-java\"><code data-language=\"java\"><span class=\"token comment\">// Load the default dictionaries for English.</span>\n<span class=\"token class-name\">LanguageComponents</span> english <span class=\"token operator\">=</span>\n    <span class=\"token class-name\">LanguageComponents</span><span class=\"token punctuation\">.</span><span class=\"token function\">loader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">limitToLanguages</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"English\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">limitToAlgorithms</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LingoClusteringAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">language</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"English\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">LingoClusteringAlgorithm</span> algorithm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LingoClusteringAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create an ephemeral label filter by providing a dictionary with a</span>\n<span class=\"token comment\">// few regexp exclusion patterns.</span>\n<span class=\"token class-name\">DefaultDictionaryImpl</span> labelFilter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultDictionaryImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlabelFilter<span class=\"token punctuation\">.</span>regexp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(?i).*data.*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"(?i).*mining.*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nalgorithm<span class=\"token punctuation\">.</span>dictionaries<span class=\"token punctuation\">.</span>labelFilters<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>labelFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n  </div>\n  </section>\n\n  <section id=\"tweaking-components-directly\">\n    <h2>\n        <a class=\"anchor\" href=\"#tweaking-components-directly\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Tweaking <code>LanguageComponents</code>\n      </h2>\n\n    <p id=\"53465bb12ab3a5d5793deeaf\">\n      When the default dictionaries or other components\n      fall short of requirements, a custom replacement may be provided.\n      A <code>LanguageComponents</code> instance consists\n      of a set of interfaces and suppliers providing implementations of these\n      interfaces. We can override any of these suppliers, creating a custom language preprocessing\n      pipeline.\n    </p>\n\n    <p id=\"d3580bc86b406f8133b674c5\">\n      As an example, let's modify the English pipeline to use a custom word stemming component.\n      The supplier for this component always returns the same closure, converting the input to lower\n      case:\n    </p>\n\n    <div class=\"gatsby-highlight\">\n    <pre class=\"language-java\"><code data-language=\"java\"><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Stemmer</span><span class=\"token punctuation\">></span></span> stemmerSupplier<span class=\"token punctuation\">;</span>\nstemmerSupplier <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> word<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span>ROOT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n  </div>\n\n    <p id=\"f4c555865ff586b41899e70a\">\n      We will also replace the default <code>StopwordFilter</code> and <code>LabelFilter</code> components\n      with custom filters based on hardcoded rules:\n    </p>\n\n    <div class=\"gatsby-highlight\">\n    <pre class=\"language-java\"><code data-language=\"java\"><span class=\"token comment\">// Ignore words from the list and anything shorter than 4 characters.</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> ignored <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"what\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">StopwordFilter</span> wordFilter <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Ignore any word shorter than 4 characters or on the explicit exclusion list.</span>\n      <span class=\"token keyword\">return</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">4</span> <span class=\"token operator\">&&</span> <span class=\"token operator\">!</span>ignored<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">LabelFilter</span> labelFilter <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Ignore any label that has a substring 'data' in it.</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>label<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span>ROOT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n  </div>\n\n    <p id=\"2bd99fa107ba97dc4cbd0270\">\n      Note how the initialization of the <code>ignored</code> hash set is pulled out of the supplier.\n      The cost of setting up a heavy component (creating the hash set itself in this case) can be high but\n      once set up, suppliers should return instances of the component quickly.\n    </p>\n\n    <p id=\"279a15b3b4b42344d301a6bb\">\n      Once we have custom suppliers, overriding their default implementations\n      for English is trivial:\n    </p>\n\n    <div class=\"gatsby-highlight\">\n    <pre class=\"language-java\"><code data-language=\"java\"><span class=\"token class-name\">LanguageComponents</span> customized <span class=\"token operator\">=</span>\n    <span class=\"token class-name\">LanguageComponents</span><span class=\"token punctuation\">.</span><span class=\"token function\">loader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">language</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"English\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">override</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stemmer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> stemmerSupplier<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Word and label filters are thread-safe here so we</span>\n        <span class=\"token comment\">// supply the same instance all the time.</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">override</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StopwordFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> wordFilter<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">override</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LabelFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> labelFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n  </div>\n  </section>\n\n  <section id=\"other-languages\">\n    <h2>\n        <a class=\"anchor\" href=\"#other-languages\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Support for other languages\n      </h2>\n\n    <p id=\"6928097f1ae1405c22aba844\">\n      The core Carrot<sup>2</sup> JAR supports only a limited set of popular languages.\n      Additional modules add support for other languages and bring in extra resources required\n      for these languages to work properly.\n    </p>\n\n    <p id=\"554ef35e170f81f3188448b3\">\n      All language extensions live under the <code>org.carrot2.lang</code> artifact\n      group namespace. Note that many of them come with sizeable\n      own dependencies like <a href=\"https://lucene.apache.org/\">Apache Lucene</a>\n      analyzers or dictionaries.\n    </p>\n\n    <ul>\n      <li id=\"125c9c0e8e67f38a2292ad2b\"><code>carrot2-lang-lucene-chinese</code>: Chinese (traditional\n        and simplified).\n      </li>\n      <li id=\"7eaef67c21e8086e7a11fbf2\"><code>carrot2-lang-lucene-japanese</code>: Japanese.</li>\n      <li id=\"84bfacffa246423eeb4258c9\"><code>carrot2-lang-lucene-korean</code>: Korean.</li>\n      <li id=\"92fe38f3120d8a695bbfe504\"><code>carrot2-lang-lucene</code>: adds support for many other languages\n        supported by the <a href=\"https://lucene.apache.org/\">Apache Lucene</a> project.\n      </li>\n      <li id=\"a38b32be5bc2feabe60b9e3e\"><code>carrot2-lang-polish</code>: Polish.</li>\n    </ul>\n\n    <p id=\"add61fd03436e3605c8e83da\">\n      A language extension is automatically added to the list of supported language components if\n      it can be located and loaded by Java's standard <code>ServiceLoader</code>.\n    </p>\n\n  </section>\n</article>","tableOfContents":[{"heading":"Tweaking lexical filters","anchor":"tweaking-lexical-filters"},{"heading":"Ephemeral dictionaries (lexical filters)","anchor":"ephemeral-dictionaries"},{"heading":"Tweaking LanguageComponents","anchor":"tweaking-components-directly"},{"heading":"Support for other languages","anchor":"other-languages"}]}},"pageContext":{"slug":"/java-language-components/"}},"staticQueryHashes":["1164750013"]}