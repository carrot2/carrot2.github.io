{"componentChunkName":"component---node-modules-carrotsearch-gatsby-theme-apidocs-templates-documentation-page-js","path":"/dcs-templates/","result":{"data":{"html":{"frontmatter":{"id":"dcs-templates","title":"Request Templates"},"html":"<article>\n  <h1>Request Templates</h1>\n\n  <p id=\"8a66874a52ab72795ebe28ba\">\n    This section introduces request templates and why they can be useful to detach algorithm\n    configuration from actual clustering requests.\n  </p>\n\n  <p id=\"5f240ad1e730f3b5d7cb8b22\">\n    As mentioned in the <a href=\"/rest-api-basics/#clustering\">introduction</a>,\n    a clustering query is self-contained and must carry the three required elements:\n    algorithm name, language and documents to be clustered. In practice, the first two elements\n    will rarely change â€“ once the algorithm for a particular task is chosen, it will probably\n    remain constant for all clustering requests. In situations like this we can pull out\n    the constant part of the query into a <strong>template</strong> and use basic\n    composition with the body of a query to get the final request.\n  </p>\n\n  <p id=\"a161c2e2a1ddae884e07d457\">\n    Another useful application of templates is to detach the algorithm and its\n    configuration from the logic that queries the clustering service or to group\n    different algorithms and their tuning variants under much easier to remember\n    aliases.\n  </p>\n\n  <section id=\"new-template\">\n    <h2>\n        <a class=\"anchor\" href=\"#new-template\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>How to create a request template?\n      </h2>\n\n    <p id=\"9f47c42bacb30d43c5396ed1\">\n      Let's explain it by walking through a simple example. For a request\n      body like the one shown below, we can pull out everything up to the documents section:\n    </p>\n\n    <div class=\"gatsby-highlight\">\n    <pre class=\"language-json\"><code data-language=\"json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"language\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"English\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"algorithm\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Lingo\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"documents\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PDF Viewer on Windows\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Firefox PDF plugin to view PDF in browser on Windows\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Limit CPU usage for flash in Firefox?\"</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n  </div>\n\n    <p id=\"21631653ec269ed79937709a\">\n      Let's create a file called <code>04 foo.json</code> under DCS-relative path:\n      <code>web/service/templates/04 foo.json</code>. The name (identifier)\n      of the template is embedded in the file name: it is <code>foo</code>. The\n      number in front of the alphanumeric name is always stripped (but it is used\n      to sort the templates for display purposes).\n    </p>\n\n    <div class=\"gatsby-highlight\">\n    <pre class=\"language-json\"><code data-language=\"json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"language\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"English\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"algorithm\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Lingo\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parameters\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"preprocessing\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"phraseDfThreshold\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"wordDfThreshold\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n  </div>\n\n    <p id=\"5b54d1845d7d694a80275f02\">\n      The <code>foo</code> template contains constant (but overrideable) elements\n      of our clustering query. Once the DCS is started we can see if the template\n      has been loaded by looking at the startup log message or by\n      running a GET query against the <code>/list</code> endpoint:\n    </p>\n\n    <div class=\"gatsby-highlight\">\n    <pre class=\"language-json\"><code data-language=\"json\">...\n  <span class=\"token property\">\"templates\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"frontend-default\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"lingo\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"stc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"bkmeans\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"foo\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </div>\n\n    <p id=\"bc89070f78a0f9e7b9f3a59a\">\n      Armed with the template <code>foo</code> we can now assemble a much simpler\n      clustering request containing just the documents to be clustered:\n    </p>\n\n    <div class=\"gatsby-highlight\">\n    <pre class=\"language-json\"><code data-language=\"json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"documents\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"field\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"foo bar\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"field\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"field\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"baz\"</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n  </div>\n\n    <p id=\"2482f65fcb32034cf9854112\">\n      When posting the documents for clustering, use the\n      <code>template</code> request parameter to provide the the template name\n      (<code>foo</code> in our case):\n    </p>\n\n    <div class=\"gatsby-highlight\">\n    <pre class=\"language-shell\"><code data-language=\"shell\"><span class=\"token function\">curl</span> -X POST --header <span class=\"token string\">\"Content-Type: text/json\"</span> --data-binary @template-request.json <span class=\"token string\">\"http://localhost:8080/service/cluster?indent&template=foo\"</span></code></pre>\n  </div>\n  </section>\n</article>","tableOfContents":[{"heading":"How to create a request template?","anchor":"new-template"}]}},"pageContext":{"slug":"/dcs-templates/"}},"staticQueryHashes":["1164750013"]}